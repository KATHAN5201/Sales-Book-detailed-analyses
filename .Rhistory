#importing the data set
library(tidyverse)
book_sales <- read_csv("../datasets/sales2019.csv")
glimpse(book_sales)
#importing the data set
library(tidyverse)
book_sales <- read_csv("../datasets/sales2019.csv")
glimpse(book_sales)
nrow(book_sales)
View(book_sales)
summary(book_sales)
?is.na()
#getting column names
column_vector <- colnames(book_sales)
print(column_vector)
#displaying data types of every column
for (column in column_vector){
print(str_c(column,": ", typeof(book_sales[[column]])))
}
is.na(book_sales)
?apply
apply(book_sales, 2, function(c) any(is.na(x)))
apply(book_sales, 2, function(c) any(is.na(c)))
#'2' represents apply the function on columns
apply(book_sales, 1, function(c) any(is.na(c)))
#'2' represents apply the function on columns
apply(book_sales, 2, function(c) any(is.na(c)))
#'2' represents apply the function on columns
column_with_NA <- colum_vector(apply(book_sales, 2, function(c) any(is.na(c))))
#'2' represents apply the function on columns
column_with_NA <- colum_vector[apply(book_sales, 2, function(c) any(is.na(c)))]
#'2' represents apply the function on columns
column_with_NA <- column_vector[apply(book_sales, 2, function(c) any(is.na(c)))]
#'2' represents apply the function on columns
column_with_NA <- column_vector[apply(book_sales, 2, function(c) any(is.na(c)))]
column_with_NA
#'2' represents apply the function on columns
is_NA <- apply(book_sales, 2, function(c) any(is.na(c)))
column_with_NA <- column_vector[is_NA]
print(column_with_NA)
#'2' represents apply the function on columns
#This is logical vector with elements having value TRUE if a column has NA and FALSE otherwise
is_NA <- apply(book_sales, 1, function(c) any(is.na(c)))
column_with_NA <- column_vector[is_NA]
print(column_with_NA)
#'2' represents apply the function on columns
#This is logical vector with elements having value TRUE if a column has NA and FALSE otherwise
apply(book_sales, 1, function(c) any(is.na(c)))
#'2' represents apply the function on columns
#This is logical vector with elements having value TRUE if a column has NA and FALSE otherwise
is_NA <- apply(book_sales, 2, function(c) any(is.na(c)))
column_with_NA <- column_vector[is_NA]
print(column_with_NA)
book_sales_cleaned <- book_sales %>%
filter(!is.na(user_submitted_review))
View(book_sales_cleaned)
book_sales_cleaned <- book_sales %>%
filter(!is.na(user_submitted_review))
avg_purchased_value <- mean(book_sales_cleaned$total_purchased)
avg_purchased_value
book_sales_cleaned$total_purchased
avg_purchased_value <- mean(book_sales_cleaned$total_purchased,
na.rm = TRUE)
avg_purchased_value
avg_purchased_value <- mean(book_sales_cleaned$total_purchased,
na.rm = TRUE)
book_sales_cleaned <- book_sales_cleaned %>%
mutate(
total_purchased = if_else(is.na(total_purchased),
avg_purchased_value,
total_purchased)
)
View(book_sales_cleaned)
View(book_sales_cleaned)
unique(book_sales_cleaned$user_submitted_review)
#Checking the unique reviews
print(unique(book_sales_cleaned$user_submitted_review))
#function to check if a review was positive
is_positive <- function(review){
output <- case_when(
str_detect(review, "okay") ~ TRUE,
str_detect(review, "Awesome") ~ TRUE,
str_detect(review, "learned") ~ TRUE,
str_detect(review, "Never") ~ TRUE,
str_detect(review, "OK") ~ TRUE,
TRUE ~ FALSE
)
}
#updating the book sales data
book_sales_cleaned <- book_sales_cleaned %>%
mutate(
review_positive = unlist(map(user_submitted_review, is_positive))
)
View(book_sales_cleaned)
View(book_sales_cleaned)
?mdy
book_sales_cleaned_dates <- book_sales_cleaned %>%
mutate(
date = ymd(date)
)
library(lubridate)
book_sales_cleaned_dates <- book_sales_cleaned %>%
mutate(
date = ymd(date)
)
#importing the data set
library(tidyverse)
book_sales <- read_csv("../datasets/sales2019.csv")
glimpse(book_sales)
#getting column names
column_vector <- colnames(book_sales)
print(column_vector)
#displaying data types of every column
for (column in column_vector){
print(str_c(column,": ", typeof(book_sales[[column]])))
}
#'2' represents apply the function on columns
#This is logical vector with elements having value TRUE if a column has NA and FALSE otherwise
is_NA <- apply(book_sales, 2, function(c) any(is.na(c)))
column_with_NA <- column_vector[is_NA]
print(column_with_NA)
book_sales_cleaned <- book_sales %>%
filter(!is.na(user_submitted_review))
avg_purchased_value <- mean(book_sales_cleaned$total_purchased,
na.rm = TRUE)
book_sales_cleaned <- book_sales_cleaned %>%
mutate(
total_purchased = if_else(is.na(total_purchased),
avg_purchased_value,
total_purchased)
)
#Checking the unique reviews
print(unique(book_sales_cleaned$user_submitted_review))
#function to check if a review was positive
is_positive <- function(review){
output <- case_when(
str_detect(review, "okay") ~ TRUE,
str_detect(review, "Awesome") ~ TRUE,
str_detect(review, "learned") ~ TRUE,
str_detect(review, "Never") ~ TRUE,
str_detect(review, "OK") ~ TRUE,
TRUE ~ FALSE
)
}
#updating the book sales data
book_sales_cleaned <- book_sales_cleaned %>%
mutate(
review_positive = unlist(map(user_submitted_review, is_positive))
)
book_sales_cleaned_dates <- book_sales_cleaned %>%
mutate(
date = ymd(date)
)
View(book_sales_cleaned_dates)
View(book_sales_cleaned)
book_sales_cleaned_dates <- book_sales_cleaned %>%
mutate(
date = mdy(date)
)
mdy("04-25-20")
library(lubridate)
mdy("04-25-20")
book_sales_cleaned_dates <- book_sales_cleaned %>%
mutate(
date = lubridate::mdy(date)
)
View(book_sales_cleaned_dates)
book_sales_cleaned_dates <- book_sales_cleaned %>%
mutate(
date = lubridate::mdy(date),
date_status = if_else(date < lubridate::ymd("2019-07-1"), "PRe", "POS")
) %>%
arrange(desc(date))
View(book_sales_cleaned_dates)
book_sales_cleaned_dates <- book_sales_cleaned %>%
mutate(
date = lubridate::mdy(date),
date_status = if_else(date < lubridate::ymd("2019-07-1"), "PRE", "POS")
) %>%
arrange(desc(date))
View(book_sales_cleaned_dates)
View(book_sales_cleaned_dates)
integer(5.6)
as.integer(5.6)
View(book_sales)
#importing the data set
library(tidyverse)
book_sales <- read_csv("../datasets/sales2019.csv")
glimpse(book_sales)
#getting column names
column_vector <- colnames(book_sales)
print(column_vector)
#displaying data types of every column
for (column in column_vector){
print(str_c(column,": ", typeof(book_sales[[column]])))
}
#'2' represents apply the function on columns
#This is logical vector with elements having value TRUE if a column has NA and FALSE otherwise
is_NA <- apply(book_sales, 2, function(c) any(is.na(c)))
column_with_NA <- column_vector[is_NA]
print(column_with_NA)
book_sales_cleaned <- book_sales %>%
filter(!is.na(user_submitted_review))
avg_purchased_value <-as.integer(mean(book_sales_cleaned$total_purchased,
na.rm = TRUE))
book_sales_cleaned <- book_sales_cleaned %>%
mutate(
total_purchased = if_else(is.na(total_purchased),
avg_purchased_value,
total_purchased)
)
#importing the data set
library(tidyverse)
book_sales <- read_csv("../datasets/sales2019.csv")
glimpse(book_sales)
#getting column names
column_vector <- colnames(book_sales)
print(column_vector)
#displaying data types of every column
for (column in column_vector){
print(str_c(column,": ", typeof(book_sales[[column]])))
}
#'2' represents apply the function on columns
#This is logical vector with elements having value TRUE if a column has NA and FALSE otherwise
is_NA <- apply(book_sales, 2, function(c) any(is.na(c)))
column_with_NA <- column_vector[is_NA]
print(column_with_NA)
book_sales_cleaned <- book_sales %>%
filter(!is.na(user_submitted_review))
avg_purchased_value <-as.integer(mean(book_sales_cleaned$total_purchased,
na.rm = TRUE))
book_sales_cleaned <- book_sales_cleaned %>%
mutate(
total_purchased = if_else(is.na(total_purchased),
avg_purchased_value,
total_purchased)
)
book_sales_cleaned <- book_sales_cleaned %>%
mutate(
total_purchased = if_else(is.na(total_purchased),
as.numeric(avg_purchased_value),
total_purchased)
)
#Checking the unique reviews
print(unique(book_sales_cleaned$user_submitted_review))
#function to check if a review was positive
is_positive <- function(review){
output <- case_when(
str_detect(review, "okay") ~ TRUE,
str_detect(review, "Awesome") ~ TRUE,
str_detect(review, "learned") ~ TRUE,
str_detect(review, "Never") ~ TRUE,
str_detect(review, "OK") ~ TRUE,
TRUE ~ FALSE
)
}
#updating the book sales data
book_sales_cleaned <- book_sales_cleaned %>%
mutate(
review_positive = unlist(map(user_submitted_review, is_positive))
)
book_sales_cleaned_dates <- book_sales_cleaned %>%
mutate(
date = lubridate::mdy(date),
date_status = if_else(date < lubridate::ymd("2019-07-1"),
"PRE", "POS")
) %>%
arrange(desc(date))
book_sales_groupby_dates <- book_sales_cleaned_dates %>%
group_by(date_status)%>%
summarise(
books_purchased = sum(total_purchased),
.groups = '.drop'
)
book_sales_groupby_dates <- book_sales_cleaned_dates %>%
group_by(date_status)%>%
summarise(
books_purchased = sum(total_purchased),
.groups = 'drop'
)
View(book_sales_groupby_dates)
View(book_sales_cleaned_dates)
book_sales_groupby_dates <- book_sales_cleaned_dates %>%
group_by(date_status, title)%>%
summarise(
books_purchased = sum(total_purchased),
.groups = 'drop'
)
View(book_sales_groupby_dates)
View(book_sales_cleaned_dates)
T + F
